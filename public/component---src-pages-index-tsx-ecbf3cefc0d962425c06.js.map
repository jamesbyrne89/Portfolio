{"version":3,"sources":["webpack:///./src/components/AnimationWrapper.tsx","webpack:///./src/components/HeroSection.tsx","webpack:///./src/components/SkillsSection.tsx","webpack:///./src/components/ContactSection.tsx","webpack:///./src/pages/index.tsx"],"names":["Wrapper","styled","span","delay","animated","exited","AnimationWrapper","ref","children","offset","useState","setAnimated","scrollPos","setScrollPos","setExited","getScrollPosition","requestAnimationFrame","window","scrollY","useEffect","addEventListener","removeEventListener","current","triggerPoint","Math","round","offsetTop","innerHeight","forwardRef","HeroSectionStyles","section","colours","navy","sectionPadding","HeroSectionTextStyles","article","getBodyFontStyles","HeadlineStyles","h1","yellow","fonts","headingFont","fontSizes","headingLg","IntroTextWrapper","div","HeroSection","headlineText","introText","split","slice","join","concat","String","fromCharCode","href","withUnderline","SkillsSectionStyles","grey","DetailsSectionStyles","bodyFont","headingSm","List","ul","SkillsSection","technologies","used","learning","techListRefs","map","item","useRef","learningListRefs","titleOne","titleTwo","tech","i","key","ContactSectionStyles","getHeadingFontStyles","body","ContactSection","titleRef","emailRef","IndexPage","site","useStaticQuery","Layout","title","description","siteMetadata","introSection","headline","blurb","skills"],"mappings":"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","file":"component---src-pages-index-tsx-ecbf3cefc0d962425c06.js","sourcesContent":["import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n  offset?: number;\r\n  delay?: number;\r\n  animated?: boolean;\r\n  exited?: boolean;\r\n}\r\n\r\nconst Wrapper = styled.span<Props>`\r\n  overflow: hidden;\r\n  height: auto;\r\n  padding-bottom: 0.25em;\r\n  display: block;\r\n  white-space: nowrap;\r\n  > * {\r\n    will-change: transform;\r\n    transition: transform 1s cubic-bezier(0.6, 0, 0.2, 1), opacity 1s cubic-bezier(0.6, 0, 0.2, 1);\r\n    ${({ delay }) => (delay ? `transition-delay: ${delay}s;` : null)}\r\n    transform: ${({ animated }) => `translateY(${animated ? \"0%\" : \"110%\"})`};\r\n    opacity: ${({ exited }) => (exited ? \"0\" : \"1\")};\r\n  }\r\n\r\n`;\r\n\r\nconst AnimationWrapper = (\r\n  { children, offset = 0.8, delay = 0 }: Props,\r\n  ref: React.RefObject<HTMLElement>\r\n) => {\r\n  const [animated, setAnimated] = useState(false);\r\n  const [scrollPos, setScrollPos] = useState(0);\r\n  const [exited, setExited] = useState(false);\r\n\r\n  const getScrollPosition = () => requestAnimationFrame(() => setScrollPos(window.scrollY));\r\n\r\n\r\n  useEffect(() => {\r\n    if (!window) {\r\n      return;\r\n    }\r\n    setScrollPos(window.scrollY)\r\n    window.addEventListener(\"scroll\", getScrollPosition);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", getScrollPosition);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!ref || !ref.current) {\r\n      setAnimated(true);\r\n      return;\r\n    }\r\n\r\n    const triggerPoint = Math.round(\r\n      ref.current.offsetTop - window.innerHeight * offset\r\n    );\r\n    if (scrollPos > triggerPoint) {\r\n      setAnimated(true);\r\n    }\r\n\r\n    return () => setExited(true);\r\n  }, [scrollPos, ref, scrollPos, offset]);\r\n\r\n  return (\r\n    <Wrapper animated={animated} delay={delay}>\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default forwardRef(AnimationWrapper);\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { colours, fonts, fontSizes } from \"../styles/theme\";\r\nimport {\r\n  LinkStyles,\r\n  getBodyFontStyles,\r\n  Line,\r\n  sectionPadding,\r\n} from \"../components/styles/sharedStyles\";\r\nimport AnimationWrapper from \"../components/AnimationWrapper\";\r\n\r\ninterface Props {\r\n  headlineText: string;\r\n  introText: string;\r\n}\r\n\r\nconst HeroSectionStyles = styled.section`\r\n  background: ${colours.navy};\r\n  height: calc(100vh - 100px);\r\n  display: flex;\r\n  align-items: center;\r\n  ${sectionPadding}\r\n  @media (max-width: 475px) {\r\n    height: calc(100vh - 70px);\r\n  }\r\n`;\r\n\r\nconst HeroSectionTextStyles = styled.article`\r\n  margin-left: 10vw;\r\n  max-width: 700px;\r\n  @media (max-width: 475px) {\r\n    margin-left: 0;\r\n  }\r\n  p {\r\n    ${getBodyFontStyles}\r\n    color: #fff;\r\n    line-height: 1.5;\r\n    margin-bottom: 0;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    position: relative;\r\n    display: inline-block;\r\n    &:hover::after {\r\n      opacity: 0;\r\n      transform: translateY(4px);\r\n    }\r\n  }\r\n`;\r\n\r\nconst HeadlineStyles = styled.h1`\r\n  color: ${colours.yellow};\r\n  font-family: ${fonts.headingFont};\r\n  font-size: ${fontSizes.headingLg};\r\n  line-height: 1.1;\r\n  margin: 0;\r\n  @media (max-width: 768px) {\r\n    font-size: 2.75rem;\r\n  }\r\n  @media (max-width: 550px) {\r\n    font-size: 2.25rem;\r\n  }\r\n  @media (max-width: 400px) {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nconst IntroTextWrapper = styled.div`\r\n  margin: 2.5em 0 1em;\r\n`;\r\n\r\nconst HeroSection = ({ headlineText, introText }: Props) => (\r\n  <HeroSectionStyles>\r\n    <HeroSectionTextStyles>\r\n      <AnimationWrapper>\r\n        <HeadlineStyles>\r\n          {headlineText\r\n            .split(\" \")\r\n            .slice(0, 4)\r\n            .join(\" \")}\r\n        </HeadlineStyles>\r\n      </AnimationWrapper>\r\n      <AnimationWrapper>\r\n        <HeadlineStyles>\r\n          {headlineText\r\n            .split(\" \")\r\n            .slice(4, 6)\r\n            .join(\" \")}\r\n        </HeadlineStyles>\r\n      </AnimationWrapper>\r\n      <AnimationWrapper>\r\n        <HeadlineStyles>\r\n          {headlineText\r\n            .split(\" \")\r\n            .slice(6)\r\n            .join(\" \")}\r\n        </HeadlineStyles>\r\n      </AnimationWrapper>\r\n      <IntroTextWrapper>\r\n        <Line>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(0, 4)\r\n                .join(\" \")\r\n                .concat(String.fromCharCode(160))}\r\n            </p>\r\n          </AnimationWrapper>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(4, 9)\r\n                .join(\" \")}\r\n            </p>\r\n          </AnimationWrapper>\r\n        </Line>\r\n        <Line>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(9, 14)\r\n                .join(\" \")\r\n                .concat(String.fromCharCode(160))}\r\n            </p>\r\n          </AnimationWrapper>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(14, 18)\r\n                .join(\" \")}\r\n            </p>\r\n          </AnimationWrapper>\r\n        </Line>\r\n        <Line>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(18, 24)\r\n                .join(\" \")\r\n                .concat(String.fromCharCode(160))}\r\n            </p>\r\n          </AnimationWrapper>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(24, 29)\r\n                .join(\" \")}\r\n            </p>\r\n          </AnimationWrapper>\r\n        </Line>\r\n        <Line>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(29, 35)\r\n                .join(\" \")\r\n                .concat(String.fromCharCode(160))}\r\n            </p>\r\n          </AnimationWrapper>\r\n          <AnimationWrapper>\r\n            <p>\r\n              {introText\r\n                .split(\" \")\r\n                .slice(35)\r\n                .join(\" \")}\r\n            </p>\r\n          </AnimationWrapper>\r\n        </Line>\r\n      </IntroTextWrapper>\r\n      <p>\r\n        <AnimationWrapper>\r\n          <LinkStyles href=\"mailto:mail@jamestbyrne.com\" withUnderline>\r\n            Get in touch\r\n          </LinkStyles>\r\n        </AnimationWrapper>\r\n      </p>\r\n    </HeroSectionTextStyles>\r\n  </HeroSectionStyles>\r\n);\r\n\r\nexport default HeroSection;\r\n","import React, { useRef } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { colours, fonts, fontSizes } from \"../styles/theme\";\r\nimport { getBodyFontStyles } from \"./styles/sharedStyles\";\r\nimport AnimationWrapper from \"./AnimationWrapper\";\r\n\r\ninterface Props {\r\n  technologies: {\r\n    used: string[];\r\n    learning: string[];\r\n  };\r\n}\r\n\r\nconst SkillsSectionStyles = styled.section`\r\n  background: ${colours.grey};\r\n  padding: 8em 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 80vw;\r\n  margin: auto;\r\n  display: grid;\r\n  grid-gap: 4em;\r\n  grid-template-columns: 1fr 1fr;\r\n  @media (max-width: 500px) {\r\n    font-size: 2.5rem;\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 2em;\r\n  }\r\n  @media (max-width: 475px) {\r\n    width: 100%;\r\n    padding: 0 1.25rem;\r\n  }\r\n`;\r\n\r\nconst DetailsSectionStyles = styled.div`\r\n  font-family: ${fonts.bodyFont};\r\n  h2 {\r\n    font-family: ${fonts.headingFont};\r\n    font-size: ${fontSizes.headingSm};\r\n  }\r\n`;\r\n\r\nconst List = styled.ul`\r\n  max-width: 750px;\r\n  ${getBodyFontStyles}\r\n  margin-top: 1.75em;\r\n\r\n  li {\r\n    margin-right: 1.5em;\r\n    line-height: 1.5;\r\n  }\r\n`;\r\n\r\nconst SkillsSection = ({ technologies }: Props) => {\r\n  const { used, learning } = technologies;\r\n\r\n  const techListRefs = used.map(item => useRef(null));\r\n  const learningListRefs = learning.map(item => useRef(null));\r\n\r\n  const titleOne = useRef(null);\r\n  const titleTwo = useRef(null);\r\n\r\n  return (\r\n    <SkillsSectionStyles>\r\n      <Wrapper>\r\n        <DetailsSectionStyles>\r\n          <AnimationWrapper ref={titleOne} offset={0.8}>\r\n            <h2 ref={titleOne}>Technologies I've used.</h2>\r\n          </AnimationWrapper>\r\n          <List>\r\n            {used.map((tech, i) => (\r\n              <AnimationWrapper\r\n                key={tech + i}\r\n                ref={techListRefs[0]}\r\n                delay={0.3 + i / 10}\r\n              >\r\n                <li key={tech + i} ref={techListRefs[i]}>\r\n                  {tech}\r\n                </li>\r\n              </AnimationWrapper>\r\n            ))}\r\n          </List>\r\n        </DetailsSectionStyles>\r\n        <DetailsSectionStyles>\r\n          <AnimationWrapper ref={titleTwo} offset={0.8} delay={2}>\r\n            <h2 ref={titleTwo}>What I'm currently learning.</h2>\r\n          </AnimationWrapper>\r\n          <List>\r\n            {learning.map((tech, i) => (\r\n              <AnimationWrapper\r\n                key={tech + i}\r\n                ref={learningListRefs[0]}\r\n                delay={2.5 + i / 10}\r\n              >\r\n                <li key={tech + i} ref={learningListRefs[i]}>\r\n                  {tech}\r\n                </li>\r\n              </AnimationWrapper>\r\n            ))}\r\n          </List>\r\n        </DetailsSectionStyles>\r\n      </Wrapper>\r\n    </SkillsSectionStyles>\r\n  );\r\n};\r\n\r\nexport default SkillsSection;\r\n","import React, { useRef } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { colours, fonts, fontSizes } from \"../styles/theme\";\r\nimport {\r\n  LinkStyles,\r\n  getBodyFontStyles,\r\n  getHeadingFontStyles,\r\n  sectionPadding,\r\n} from \"./styles/sharedStyles\";\r\nimport AnimationWrapper from \"./AnimationWrapper\";\r\n\r\nconst ContactSectionStyles = styled.div`\r\n  background: ${colours.grey};\r\n  ${sectionPadding};\r\n  padding-top: 2em;\r\n  padding-bottom: 12em !important;\r\n  font-family: ${fonts.headingFont};\r\n  h2 {\r\n    ${getHeadingFontStyles}\r\n  }\r\n  h3 {\r\n    padding-bottom: 0.75em;\r\n    font-size: ${fontSizes.body};\r\n    margin-top: 1.65em;\r\n  }\r\n  a {\r\n    display: inline-block;\r\n    ${getBodyFontStyles}\r\n  }\r\n`;\r\n\r\nconst ContactSection = () => {\r\n  const titleRef = useRef(null);\r\n  const emailRef = useRef(null);\r\n  return (\r\n    <ContactSectionStyles>\r\n      <AnimationWrapper ref={titleRef} offset={0.8}>\r\n        <h2 ref={titleRef}>Let's work together!</h2>\r\n      </AnimationWrapper>\r\n      <AnimationWrapper ref={titleRef} offset={0.8} delay={0.15}>\r\n        <h3>Email address</h3>\r\n      </AnimationWrapper>\r\n      <AnimationWrapper ref={titleRef} offset={0.8} delay={0.3}>\r\n        <LinkStyles\r\n          ref={emailRef}\r\n          href=\"mailto: mail@jamestbyrne.com\"\r\n          withUnderline\r\n        >\r\n          mail@jamestbyrne.com\r\n        </LinkStyles>\r\n      </AnimationWrapper>\r\n    </ContactSectionStyles>\r\n  );\r\n};\r\n\r\nexport default ContactSection;\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport Layout from \"../components/Layout\";\r\nimport HeroSection from \"../components/HeroSection\";\r\nimport SkillsSection from \"../components/SkillsSection\";\r\nimport ContactSection from \"../components/ContactSection\";\r\nimport SEO from \"../components/Seo\";\r\nimport { skills } from \"../data/content\";\r\n\r\nconst IndexPage = () => {\r\n  const { site } = useStaticQuery(graphql`\r\n    query HomepageDataQuery {\r\n      site {\r\n        siteMetadata {\r\n          description\r\n          introSection {\r\n            headline\r\n            blurb\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"James Byrne\" description={site.siteMetadata.description}/>\r\n      <HeroSection\r\n        headlineText={site.siteMetadata.introSection.headline}\r\n        introText={site.siteMetadata.introSection.blurb}\r\n      />\r\n      <SkillsSection technologies={skills.technologies} />\r\n      <ContactSection />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}